theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_label(
label = c(test$ebit),
position = position_stack(vjust = 0.75),
check_overlap = T
)+
geom_label(
aes(as.factor(year), ebit_margin * scaleFactor, group = 1),
label = c(test$ebit),
position = position_stack(vjust = 0.99),
check_overlap = T
)
one.title <- data.frame(id = '1a', title = 'first title')
one.author <- data.frame(first_name = c('Susan', 'Alice'),
last_name  = c('Smith', 'Johnson') )
second.title <- data.frame(id = '2b', title = 'second_title')
second.author <- data.frame(first_name = c('Sarah', 'Mary'),
last_name  = c('Davis', 'Proctor') )
one.list <- list()
one.list[[1]]$title <- one.title
one.list[[1]]$author <- one.author
one.list[[2]]$title <- second.title
one.list[[2]]$author <- second.author
one.list
one.list <- list(
list(title = one.title, author =  one.author),
list(title = second.title, author =  second.author)
)
one.list
authors_df_l = lapply(one.list, function(item) item$author)
do.call("rbind",authors_df_l)
install.packages(c("C50", "dbplyr", "dplyr", "ellipse", "ggplot2", "haven", "httpuv", "ifultools", "labelled", "nlme", "ordinalNet", "pkgload", "questionr", "reticulate", "rmarkdown", "rversions", "slider", "timetk"), lib="C:/Program Files/R/R-3.6.3/library")
install.packages(c("bst", "GGally", "haven", "httpuv", "later", "lubridate", "mvtnorm", "partykit", "promises", "RcppArmadillo", "rsample", "SQUAREM", "tsfeatures", "vctrs"), lib="C:/Program Files/R/R-3.6.3/library")
install.packages("binom")
rastr = function(args){
return(sum(args^2-10*cos(2*pi*args)))
}
rastr(c(0,1))
shvel = function(args){
return(sum(-args*sin(sqrt(abs(args)))))
}
shvel(c(0,4))
x=seq(-4,4,length.out = 100)
x=seq(-4,4,length.out = 100)
plot(x, sapply(x, rastr))
plot(x, sapply(x, rastr), type ='l')
plot(x, sapply(x, function(t) rastr(t)*cos(t)), type ='l')
plot(x, sapply(x, rastr), type ='l',col = 'green')
plot(x, sapply(x, rastr), type ='l',col = 'green', size = 2)
plot(x, sapply(x, rastr), type ='l',col = 'green', lwd = 2, main = "Rastrigin function", ylab = 'f(x)')
x=seq(-5,5,length.out = 150)
plot(x, sapply(x, rastr), type ='l',col = 'green', lwd = 3, main = "Rastrigin function", ylab = 'f(x)')
plot(x, sapply(x, shvel), type ='l',col = 'green', lwd = 3, main = "Rastrigin function 1D", ylab = 'f(x)')
x=seq(-15,15,length.out = 150)
plot(x, sapply(x, shvel), type ='l',col = 'green', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
x=seq(-150,150,length.out = 150)
plot(x, sapply(x, shvel), type ='l',col = 'green', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
shvel = function(args){
return(sum(-args*sin(sqrt(abs(args/15)))))
}
plot(x, sapply(x, shvel), type ='l',col = 'green', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
shvel = function(args){
return(sum(-args*sin(sqrt(abs(args))))/15)
}
plot(x, sapply(x, shvel), type ='l',col = 'green', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
mapply(rastr,x,x)
get.mat = function(x,y,fun){
z = matrix(nrow = length(x), ncol = length(y))
for(i in seq(x))
for(j in seq(y)){
z[i,j]=fun(c(i,j))
}
}
get.mat(x,x,rastr)
get.mat = function(x,y,fun){
z = matrix(nrow = length(x), ncol = length(y))
for(i in seq(x))
for(j in seq(y)){
z[i,j]=fun(c(i,j))
}
return(z)
}
get.mat(x,x,rastr)
library(rgl)
library(plot3D)
library(viridis)
library(gridExtra)
library(fields)
x = x
y = y
y = x
ur = get.mat(x,y, shvel)
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.3, 1))
persp3D(z = ur, x = x1, y = y1, scale = FALSE, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(urmin, max(urRe, na.rm = TRUE) * 0.3),
expand = 0.2,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)", sub = s1, zlim = rlim, clim = rlim)
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.3, 1))
persp3D(z = ur, x = x1, y = y1, scale = FALSE, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(urmin, max(urRe, na.rm = TRUE) * 0.3),
expand = 0.2,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)", sub = '')
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.3, 1))
persp3D(z = ur, x = x, y = y, scale = FALSE, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(urmin, max(urRe, na.rm = TRUE) * 0.3),
expand = 0.2,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)", sub = '')
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.5, 1))
persp3D(z = ur, x = x/max(x), y = y/max(y), scale = FALSE, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.7,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)", sub = '')
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.5, 1))
persp3D(z = ur, x = x/max(x), y = y/max(y), scale = FALSE, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.1,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)", sub = '')
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1.5, 1))
persp3D(z = ur, x = x, y = y, scale = T, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.1,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1, 1))
persp3D(z = ur, x = x, y = y, scale = T, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.1,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1), cex = 1.0, cex.sub = 1.3, col.sub = "blue")
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1, 1))
persp3D(z = ur, x = x, y = y, scale = T, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.75,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 1))
layout(matrix(c(1, 2), 2,1, byrow = FALSE), heights = c(1, 1))
persp3D(z = ur, x = x, y = y, scale = T, zlab = "ur(x,t)",
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(z))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(2, 2), 2,1, byrow = FALSE), heights = c(1, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
persp3D(z = ur+noise, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, ur, col = heat.colors(levels), main = "|ur|")
image(x, y, abs(ur), col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(2, 2), 2,1, byrow = FALSE), heights = c(1, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
persp3D(z = ur+noize, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, ur, col = heat.colors(levels), main = "|ur|")
image(x, y, ur+noize, col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(2, 2), 2,1, byrow = FALSE), heights = c(2, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
persp3D(z = ur+noize, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "ur(x,t)")
image(x, y, ur, col = heat.colors(levels), main = "|ur|")
image(x, y, ur+noize, col = heat.colors(levels), main = "|ur|")
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(2, 2), 2,2, byrow = FALSE), heights = c(2, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function")
persp3D(z = ur+noize, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function + noise")
image(x, y, ur, col = heat.colors(levels), main = "Shvel function")
image(x, y, ur+noize, col = heat.colors(levels), main = "Shvel function + noise")
x=seq(-5,5,length.out = 150)
plot(x, sapply(x, rastr), type ='l',col = 'green', lwd = 3, main = "Rastrigin function 1D", ylab = 'f(x)')
mfrow()
par()
par(mfrow=c(1,1))
x=seq(-5,5,length.out = 150)
plot(x, sapply(x, rastr), type ='l',col = 'green', lwd = 3, main = "Rastrigin function 1D", ylab = 'f(x)')
plot(x, sapply(x, rastr), type ='l',col = 'green', lwd = 3,
main = "Rastrigin function 1D", ylab = 'f(x)',
sub = 'min = -10, argmin = 0')
x=seq(-150,150,length.out = 150)
plot(x, sapply(x, shvel), type ='l',col = 'red', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(1,2, 3,4), 2, byrow = FALSE), heights = c(2, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function 2D")
persp3D(z = ur+noize, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function 2D + noise")
image(x, y, ur, col = heat.colors(levels), main = "Shvel function")
image(x, y, ur+noize, col = heat.colors(levels), main = "Shvel function + noise")
levels = 30
par(mfrow = c(2, 2))
layout(matrix(c(1,2, 3,4), 2, byrow = T), heights = c(1.5, 1))
noize = matrix(runif(length(x)*length(y),-1,1),nrow = nrow(ur))
persp3D(z = ur, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function 2D")
persp3D(z = ur+noize, x = x, y = y, scale = T,
contour = list(nlevels = levels, col = "red"),
#zlim = c(),
expand = 0.3,
image = list(col = grey(seq(0, 1, length.out = 100))), main = "Shvel function 2D + noise")
image(x, y, ur, col = heat.colors(levels), main = "Shvel function")
image(x, y, ur+noize, col = heat.colors(levels), main = "Shvel function + noise")
shvel = function(args){
return(sum(-args*sin(sqrt(abs(args)))))
}
shvel(-125)
x=seq(-150,150,length.out = 150)
plot(x, sapply(x, shvel), type ='l',col = 'red', lwd = 3, main = "Shvel function 1D", ylab = 'f(x)')
install.packages(c("ForeCA", "fpc", "fs", "ggpubr", "mda", "openssl", "roxygen2"), lib="C:/Program Files/R/R-3.6.3/library")
install.packages(c("future.apply", "nloptr", "tidyquant", "timetk"), lib="C:/Program Files/R/R-3.6.3/library")
v = c(1,2,3)^(-2)
sum(v)
res = 1 / c(1,2,3)^2 * sum(v)
res = 1 / c(1,2,3)^2 /sum(v)
sum(res)
res
f = function(x,y) -y*log(x)-(1-y)*log(1-x)
f(0.99, 0.01)
f(0.5,0.5)
f(0.99,0.45)
f(0.65,0.65)
10000*(10000-600)*4/(1024^3)
100000*(100000-600)*4/(1024^3)
g = c(1,1,2,3,3,3,2,1,1)
f = (-0.5, 0, 0.5)
f = c(-0.5, 0, 0.5)
g = c(1,1,2,3,3,3,2,1,1)
sapply(1:(length(g)-3, function(i) sum(g[i:(i+2)]*f) )
sapply(1:(length(g)-3), function(i) sum(g[i:(i+2)]*f) )
sapply(1:(length(g)-2), function(i) sum(g[i:(i+2)]*f) )
(5*5*64+1)*128
(5*1*64+1)*128
1.1^99
e1 = exp(2)
e2 = exp(3)
vec = c(e1,e2)/(e1+e2)
vec
2*e1+e2*3
(2*e1+e2*3)/(e1+e2)
vec = c(e1+1,e2 + 3,2*e1+3*e2)/(e1+e2+1+1)
vec
mean(c(1,2,3,4,5,6,7,8,9,10))
m = matrix(c(1,0,0,1,1,1,0,0), nrow = 4)
m%*%t(m)
View(m)
View(m)
m = matrix(c(1,0,0,1,1,1,0,0), nrow = 4, byrow = T)
m%*%t(m)
logits = m%*%t(m)
arr = exp(logits)
arr = arr / rowSums(arr)
arr %*% m
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
n
install.packages(“keras”)
install.packages("keras")
library(tensorflow)
install_tensorflow()
install_tensorflow()
library(tensorflow)
install_tensorflow()
reticulate::use_condaenv("RSTUDIO", required = TRUE)
library(tensorflow)
install_tensorflow()
library(tensorflow)
tf$constant("Hellow Tensorflow")
reticulate::use_condaenv("RSTUDIO", required = TRUE)
library(tensorflow)
tf$constant("Hellow Tensorflow")
install.packages("keras")
library(keras)
install_keras()
library(keras)
install_keras()
reticulate::use_condaenv("RSTUDIO", required = TRUE)
install_keras()
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images / 255
train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)
network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
metrics <- network %>% evaluate(test_images, test_labels, verbose = 0)
metrics
install_keras(tensorflow = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
install_tensorflow(version = "gpu")
library(keras)
install_keras(tensorflow = "gpu")
reticulate::use_condaenv("RSTUDIO", required = TRUE)
install_keras(tensorflow = "gpu")
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
library(keras)
mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y
network <- keras_model_sequential() %>%
layer_dense(units = 512, activation = "relu", input_shape = c(28 * 28)) %>%
layer_dense(units = 10, activation = "softmax")
network %>% compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
train_images <- array_reshape(train_images, c(60000, 28 * 28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28 * 28))
test_images <- test_images / 255
train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)
network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
network %>% evaluate(test_images, test_labels, verbose = 0)
library(dplyr)
dt = read_csv('w2v.csv')
install.packages("tidyverse", lib="C:/Program Files/R/R-3.6.3/library")
library(dplyr)
dt = read_csv('w2v.csv')
library(tidyverse)
dt = read_csv('w2v.csv')
setwd('C:/Users/qtckp/OneDrive/Рабочий стол/SberHak/word2vec')
dt = read_csv('w2v.csv')
dt = read_csv2('w2v.csv')
dt = read_csv('w2v.csv', col_types = c(col_character(),rep(col_double(), 32)))
View(dt)
View(dt)
colnames(dt)[1] = 'words'
View(dt)
View(dt)
dt
library(tidyverse)
setwd('C:/Users/qtckp/OneDrive/Рабочий стол/SberHak/word2vec')
data = read_csv('w2v.csv', col_types = c(col_character(),rep(col_double(), 32)))
colnames(data)[1] = 'words'
data[, 2:33] = apply(data[, 2:33], 2, function(x) scale(as.numeric(x)))
install.packages(c("readxl", "dplyr", "ggplot2", "ggpubr", "corrplot", "psych", "MASS",
"tree", "randomForest", "TeachingDemos", "mice", "corrgram", "magrittr", "plotly",
"factoextra"))
install.packages(c("readxl", "dplyr", "ggplot2", "ggpubr", "corrplot", "psych", "MASS", "tree", "randomForest", "TeachingDemos", "mice", "corrgram", "magrittr", "plotly", "factoextra"))
library(readxl)  #чтение из excel
library(dplyr)  #современные средства программирования, включая функциональное
library(ggplot2)  #красивые удобные графики
library(ggpubr)  #группировка изображений
library(corrplot)  #картинка для корреляционной матрицы
library(psych)  #факторный анализ
library(MASS)  #линейный дискриминантный анализ
library(tree)  #визуализация деревьев
library(randomForest)  #случайные леса
library(TeachingDemos)  #пиктограммы
library(mice)  #обработка отсутствующих значений
library(corrgram)  #коррелограммы
library(magrittr)  #конвеерный оператор
library(plotly)  #интерактивная графика
library(factoextra)  #графика по главным компонентам
library(tidyverse)
setwd('C:/Users/qtckp/OneDrive/Рабочий стол/SberHak/word2vec')
data = read_csv('w2v.csv', col_types = c(col_character(),rep(col_double(), 32)))
colnames(data)[1] = 'words'
data[, 2:33] = apply(data[, 2:33], 2, function(x) scale(as.numeric(x)))
d = dist(data[, 2:33], method = "euclidean")
fit <- hclust(d, method = "ward.D")
plot(fit, labels = data$Country, xlab = "Countries")
plot(fit, labels = data$words, xlab = "words")
plot(fit$height, xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
fit$height
plot(fit$height[1500], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
plot(fit$height[1500:length(fit$height)], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
plot(fit$height[2000:length(fit$height)], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
plot(fit$height[2500:length(fit$height)], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
plot(fit$height[3000:length(fit$height)], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
plot(fit$height[2900:length(fit$height)], xlab = "step", ylab = "dist", type = "b", col = "blue", lwd = 1,
main = "Расстояния при объединении кластеров")
length(fit$height)
it = 1:8
sums = sapply(it, function(k) kmeans(data[, 2:33], k)$tot.withinss)
plot(it, sums, type = "b", col = "red", main = "Суммы внутригрупповых расстояний при разном числе кластеров")
it = 1:15
sums = sapply(it, function(k) kmeans(data[, 2:33], k)$tot.withinss)
plot(it, sums, type = "b", col = "red", main = "Суммы внутригрупповых расстояний при разном числе кластеров")
it = 1:50
sums = sapply(it, function(k) kmeans(data[, 2:33], k)$tot.withinss)
plot(it, sums, type = "b", col = "red", main = "Суммы внутригрупповых расстояний при разном числе кластеров")
fit = kmeans(data[, 2:33], 30)
library(factoextra)
print(fviz_cluster(fit, data[, -1], ellipse.type = "norm"))
fit = kmeans(data[, 2:33], 30, algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=TRUE)
library(factoextra)
print(fviz_cluster(fit, data[, -1], ellipse.type = "norm"))
fit = kmeans(data[, 2:33], 30, algorithm = c("MacQueen"), trace=TRUE)
library(factoextra)
print(fviz_cluster(fit, data[, -1], ellipse.type = "norm"))
print(fviz_cluster(fit, data[, -1], ellipse.type = "norm", geom = 'text'))
